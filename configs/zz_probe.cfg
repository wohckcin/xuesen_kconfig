#####################################################################
#   Probe
#####################################################################

[probe]

#--------------------------------------------------------------------

## Select the probe port by type:
## For the PROBE port. Will not work with Diode. May need pull-up resistor from signal to 24V.
pin: ^EBBCan: PB6
## For the DIAG_7 port. NEEDS BAT85 DIODE! Change to !PG15 if probe is NO.
#pin: PG15
## For Octopus Pro PROBE port; NPN and PNP proximity switch types can be set by jumper
# pin: ~!PC5

#--------------------------------------------------------------------

x_offset: 0
# y_offset: 19.75 #TAP
y_offset: 0
# z_offset: -1.145

speed: 5
lift_speed: 10
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.075
samples_tolerance_retries: 3

# TAP
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#  Gantry Adjustment Routines
#####################################################################
##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]
#  Gantry Corners for 300mm Build
#  Uncomment for 300mm build
gantry_corners:
  -60,-10
  360,370
#  Probe points
points:
  50,25
  50,225
  250,225
  250,25

speed: 400
horizontal_move_z: 5
retries: 5
retry_tolerance: 0.0075
max_adjust: 15

# #####################################################################
# #  Macros
# #####################################################################
# ## customize QUAD GANTRY LEVEL gcode
# [gcode_macro QUAD_GANTRY_LEVEL]
# description: Conform a moving, twistable gantry to the shape of a stationary bed
# rename_existing: QUAD_GANTRY_LEVEL_BASE
# gcode:
#   #####  get user defines  #####
#   {% set park_pos = printer['gcode_macro _USER_VARIABLE'].park_bed %}
#   {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
#   #####  get hardware enables  #####
#   {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
#   #####  set default  #####
#   {% set park = params.PARK|default('true') %}
#   ##### get toolhead position #####
#   {% set act_z = printer.toolhead.position.z|float %}
#   #####  end of definitions  #####
#   SAVE_GCODE_STATE NAME=STATE_QUAD_GANTRY_LEVEL
#   {% if "xyz" not in printer.toolhead.homed_axes %}
#     G28
#   {% endif %}
#   {% if act_z < z_hop %}
#     G1 Z{z_hop} F900            ; move head up
#   {% endif %}
#   {% if ena_mag_probe == 'true' %} ATTACH_PROBE {% endif %}
#   QUAD_GANTRY_LEVEL_BASE
#   G28 Z
#   {% if park|lower == 'true' %}
#     G90
#     G0 Z{park_pos[2]} F1800           ; move nozzle to z high first
#     G0 X{park_pos[0]} Y{park_pos[1]} F18000 ; home to get toolhead in the middle
#   {% endif %}
#   RESTORE_GCODE_STATE NAME=STATE_QUAD_GANTRY_LEVEL

# [gcode_macro CHECK_QGL]
# description: Run after QUAD_GANTRY_LEVEL to insure it passes
# gcode:
#   #####  Get user defines  #####
#   {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
#   #####  Get hardware enables  #####
#   {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
#   #####  end of definitions  #####
#   # check that after QGL and cancle print in case of failuare
#   {% if printer.quad_gantry_level.applied|lower == 'false' %}
#     {action_respond_info("QGL CHECK: Fail therefore cancel the print")}
#     G90
#     G0 Z{z_hop} F900           ; move nozzle to z high first
#     #{% if ena_mag_probe == 'true' %} DETACH_PROBE {% endif %}
#     PAUSE_BASE
#     UPDATE_DELAYED_GCODE ID=_EXECUTE_CANCEL_PRINT DURATION=1
#   {% else %}
#     {action_respond_info("QGL CHECK: Pass")}
#   {% endif %}


# [delayed_gcode _EXECUTE_CANCEL_PRINT]
# gcode:
#   CANCEL_PRINT PARK=1 ERROR=1