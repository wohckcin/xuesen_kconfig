#####################################################################
#   Macros
#####################################################################
# Reference: https://github.com/zztopper/voron_v2.4_1030

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90

    STATUS_HOMING
    G28

    STATUS_CLEANING
    CLEAN_NOZZLE

    STATUS_LEVELING
    QUAD_GANTRY_LEVEL

    STATUS_HOMING
    G28

    BED_MESH_CLEAR # Clears old saved bed mesh (if any)
    BED_MESH_CALIBRATE ADAPTIVE=1

    ##  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600

    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32
    STATUS_READY
# gcode:
#     SAVE_GCODE_STATE NAME=STATE_G32
#     STATUS_HEATING
#     # Set and wait for bed to reach temperature for TAP
#     M190 S100
#     # Set and wait for nozzle to reach temperature
#     M109 S150
#     STATUS_HOMING
#     G28
#     STATUS_LEVELING
#     QUAD_GANTRY_LEVEL
#     STATUS_HOMING
#     G28
#     G0 X150 Y150 Z30 F3600
#     STATUS_READY
#     ##  Uncomment for for your size printer:
#     #--------------------------------------------------------------------
#     ##  Uncomment for 250mm build
#     #G0 X125 Y125 Z30 F3600

#     ##  Uncomment for 300 build

#     ##  Uncomment for 350mm build
#     #G0 X175 Y175 Z30 F3600
#     #--------------------------------------------------------------------
#     RESTORE_GCODE_STATE NAME=STATE_G32

#####################################################################
#   print_start macro
#####################################################################

#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}

    # Start bed heating
    M140 S{BED_TEMP}

    G32                            ; home all axes

    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed

    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}

    ; LINE_PURGE
    SFS_ENABLE
    STATUS_PRINTING

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    STATUS_CLEANING
    CLEAN_NOZZLE

    STATUS_OFF
    BED_MESH_CLEAR
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

######################################################################
# KlipperScreen
######################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(50) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(50) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state

######################################################################
# Clean Nozzle
######################################################################

[gcode_macro CLEAN_NOZZLE]
# description: Cleans the nozzle on the scrub brush
# variable_start_x: 280
# variable_start_y: 301
# variable_start_z: 3.85
# variable_wipe_dist: -50
# variable_wipe_qty: 6
# variable_wipe_spd: 200
# variable_raise_distance: 30

gcode:
    {% set start_x = params.START_X|default(280)|float %}
    {% set start_y = params.START_Y|default(301)|float %}
    {% set start_z = params.START_Z|default(3.75)|float %}
    {% set wipe_dist = params.WIPE_DIST|default(-50)|float %}
    {% set wipe_qty = params.WIPE_QTY|default(6)|int %}
    {% set wipe_spd = params.WIPE_SPD|default(200)|int%}
    {% set raise_distance = params.RAISE_DISTANCE|default(30)|float %}

    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    G90                                            ; absolute positioning
    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500

    ## Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
      G1 X{start_x + wipe_dist} F{wipe_spd * 60}
      G1 X{start_x} F{wipe_spd * 60}
    {% endfor %}

    ## Raise nozzle
    G1 Z{raise_distance}

# [gcode_macro PURGE_LINE]
# gcode:
#     # description: Draw a new line to clean nozzle
#     #----------- Draw Line New -----------
#     G90
#     G0 X110 Y0 Z1 F9000         # Move to start position
#     G92 E0                        # Reset Extruder
#     G1 Z0.2 F600                  # Lower to purge height
#     G1 E15 F600                   # Extrude a little
#     G1 X10 E20 F1000              # Draw line
#     G92 E0                        # Reset Extruder
#     G91                           # relative positioning
#     G0 X50 F18000                 # Wipe line 1
#     G0 X-40 F18000                # Wipe line 2
#     G0 Z5 F1000                   # Raise nozzle
#     G0 Y5 F1000                   # move nozzle away a little
#     G90
#     #-------------------------------------

# # In order to use this you need to increase max_extrude_cross_section in your extruder config or klipper will complain. I set mine to 30
# [gcode_macro PURGE_BLOB]
# gcode:
#     # This is for a 300mm bed. If you have a diferent bed size you may want to adjust the line below
#     {% set rand_pos = (105 + ( printer.system_stats.cputime * 1000 ) % 60) %}           ; Generate pseudo random start pos so we dont wear out that one spot on the bed.
#     M117 Purging at X{ rand_pos }

#     # The start pos will be within the "handle" of the flex plate where there is some extra Y space available so we can go all the way to Y0
#     # If your setup does not have this extra space then just increase the y valie in the line "G1 X{ rand_pos } Y0 Z1 F18000"
#     G92 E0                          ; zero the extruder
#     G90                             ; absolute positioning
#     G1 X{ rand_pos } Y0 Z1 F18000   ; Go to start pos for perge line
#     G1 Z0.4 F600                    ; Lower to purge height
#     G91                             ; relative positioning
#     G1 X5 E40 F40                   ; Extrude blob of filament on the bed
#     M106 P0                         ; Enable Cooling Fan
#     G1 X20 Z5 F100                  ; Slow drag away from the blob with fans helping cool and break strings. Also raiz z zo the blob clears the fan duct
#     G1 X5  Z-5.1 F9000              ; Now that the blob has cleared the duct we go back down for a short 0.3mm height extrusion
#     G1 X5 E2 F180                   ; Slow 5mm extrude move to help with stringing
#     G1 X30 E-1 F6000                ; Fast move and retract to break strings and reduce ooze
#     G1 Z1 F100                      ; Lift
#     M106 P0 S0                      ; Disable Cooling Fan
#     G92 E0                          ; zero the extruder
#     G90                             ; absolute positioning

# [gcode_macro PRIME_NOZZLE]
# gcode:
#     SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

#     M117 Priming
#     G90 ; Absolute coordinates.
#     M83 ; Relative extruder mode.
#     G92 E0 ; Move to start of line.
#     G1 Z10 F900
#     G1 Y3 X3 F18000
#     G1 Z0.2 F900 ; Print the line.
#     G91 ; Relative coordinates.
#     G1 X100 E25 F1000 ; Extrude filament 25mm (how much it retracted in PRINT_END).
#     G1 Y-2 F1000
#     G1 X-60 E9 F1000 ; Print second part of the line.
#     G1 E-0.5 F3000 ; Retract to avoid stringing.
#     G1 X0.5 E0 F1000 ; Wipe back to break string.
#     G1 X-5.5 E0 F1000 ; Wipe forward to break string.

#     RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

######################################################################
# Pause Print and Resum Print
######################################################################
[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    PAUSE_BASE
    _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
    {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    {% set z_park_delta = 2.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E-{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91
        G1 Z{z_safe} F900
        G90
        G1 X{x_park} Y{y_park} F6000
        {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %}

######################################################################
# Filament Change
######################################################################

# recover_velocity: 50.0

# ------------------------- Filament Change --------------------------
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
# --------------------------------------------------------------------

# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# default_parameter_E: 1 # edit to your perfered retract length
# gcode:
#     G91
#     G1 E{E} F2100
#     G90
#     RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
#     BASE_RESUME

######################################################################
# Cancel object
######################################################################

# ------------------------- Cancel object --------------------------
# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

    {% if 'exclude_object' not in printer %}
        {action_raise_error("[exclude_object] is not enabled")}
    {% endif %}

    {% if 'T' in params %}
        EXCLUDE_OBJECT RESET=1

        {% for i in range(params.T | int) %}
        EXCLUDE_OBJECT_DEFINE NAME={i}
        {% endfor %}
    {% endif %}

    {% if 'C' in params %}
        EXCLUDE_OBJECT CURRENT=1
    {% endif %}

    {% if 'P' in params %}
        EXCLUDE_OBJECT NAME={params.P}
    {% endif %}

    {% if 'S' in params %}
        {% if params.S == '-1' %}
        {% if printer.exclude_object.current_object %}
            EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
        {% endif %}
        {% else %}
        EXCLUDE_OBJECT_START NAME={params.S}
        {% endif %}
    {% endif %}

    {% if 'U' in params %}
        EXCLUDE_OBJECT RESET=1 NAME={params.U}
    {% endif %}

######################################################################
# Filament sensor
######################################################################

[gcode_macro _RUNOUT_INFO]
gcode:
  {% if 'filament_motion_sensor BTT_SFS' in printer.configfile.settings %}
    {% set enable = printer['filament_motion_sensor BTT_SFS'].enabled %}
    {% set detect = printer['filament_motion_sensor BTT_SFS'].filament_detected %}
    {action_respond_info("RUNOUT Motion Sensor:
                          Enabled: %s
                          Detect Filament: %s" % (enable|lower,detect|lower))}
  {% endif %}

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=BTT_SFS ENABLE=0 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    M117 ENABLING the Smart Filament Sensor
    G92 E0 # Reset zeroed
    SET_FILAMENT_SENSOR SENSOR=BTT_SFS ENABLE=1 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor
gcode:
    M117 DISABLING the Smart Filament Sensor
    G92 E0 # Reset zeroed
    SET_FILAMENT_SENSOR SENSOR=BTT_SFS ENABLE=0 ; Put your filament sensor's name after SENSOR=